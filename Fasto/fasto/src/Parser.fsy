

%{

let p0 = (0,0)

open Microsoft.FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )

// helper function for setting up array comprehension
(*
      Dec of string * Exp<'T> * Position
      Let of Dec<'T> * Exp<'T> * Position
*)
(*let rec LetBuilder (indexlist : string list) ret pos =
      match indexlist with
      | [] -> ret
      | i :: indices ->
            Let (
                  Dec("indexOf" + i, , pos),
                  ,

            )*)
%}

//////////////////////////////////////////////////////////////////////
// TODO: Add new (lexer) token definitions:
//
//   TODO: project task 1 :
//     - multiplication (*), division (/), numerical negation (~),
//       logical negation (not), logical and (&&), logical or (||),
//       boolean literals (true, false)
//     - add the required precedence and associativity rules for
//       *, /, ~, not, &&, ||
//     - generalize the syntax of let-expressions to allow
//       multiple variable declarations
//
//   TODO: project task 2: replicate, filter, scan
//
//   TODO: project task 4: array comprehension
//////////////////////////////////////////////////////////////////////


%token <int*(int*int)> NUM
%token <bool*(int*int)> BOOLLIT
%token <char*(int*int)> CHARLIT
%token <string*(int*int)> ID STRINGLIT
%token <int*int> BACKARROW
%token <(int*int)> IF THEN ELSE LET IN EOF
%token <(int*int)> INT CHAR BOOL
%token <(int*int)> PLUS MINUS LESS
%token <(int*int)> TIMES DIVIDE
%token <(int*int)> AND OR
%token <(int*int)> NOT NEG
%token <(int*int)> DEQ LTH EQ OP MAP REDUCE IOTA ARROW REPLICATE FILTER SCAN
%token <(int*int)> FUN FN COMMA SEMICOLON READ WRITE BAR
%token <(int*int)> LPAR RPAR LBRACKET RBRACKET LCURLY RCURLY

%nonassoc ifprec letprec
%left OR
%left AND
%left NOT
%left DEQ LTH
%left PLUS MINUS
%left TIMES DIVIDE
%left NEG

%start Prog
%type <AbSyn.UntypedProg> Prog
%type <AbSyn.UntypedFunDec list> FunDecs
%type <AbSyn.UntypedFunDec> Fun
%type <AbSyn.Type> Type
%type <AbSyn.UntypedExp> Exp
%type <AbSyn.UntypedExp list> Exps
%type <AbSyn.UntypedFunArg> FunArg
// TODO: Task 1(b): add any new nonterminals here

%%

Prog :    FunDecs EOF   { $1 }
;

FunDecs : FUN Fun FunDecs { $2 :: $3 }
        | FUN Fun         { $2 :: [] }
;

Fun : Type ID LPAR Params RPAR EQ Exp
           { FunDec (fst $2, $1, $4, $7, snd $2) }
    | Type ID LPAR RPAR EQ Exp
           { FunDec (fst $2, $1, [], $6, snd $2) }
;

Type :   INT                    { AbSyn.Int }
     |   CHAR                   { AbSyn.Char }
     |   BOOL                   { AbSyn.Bool }
     |   LBRACKET Type RBRACKET { AbSyn.Array $2 }
;

Params : Type ID COMMA Params
                       { Param (fst $2, $1) :: $4 }
       | Type ID       { Param (fst $2, $1) :: [] }
;


BinOp : PLUS  { (Lambda
                       (Int, [Param ("x", Int);
                              Param ("y", Int)],
                        Plus (Var ("x", $1),
                              Var ("y", $1),
                                        $1) ,$1))}
        // Added missing BinOps 
      | MINUS { (Lambda
                       (Int, [Param ("x", Int);
                              Param ("y", Int)],
                        Minus (Var ("x", $1),
                              Var ("y", $1),
                                        $1) ,$1))}
      | TIMES  { (Lambda
                       (Int, [Param ("x", Int);
                              Param ("y", Int)],
                        Times (Var ("x", $1),
                              Var ("y", $1),
                                        $1) ,$1))}

      | DIVIDE  { (Lambda
                       (Int, [Param ("x", Int);
                              Param ("y", Int)],
                        Divide (Var ("x", $1),
                              Var ("y", $1),
                                        $1) ,$1))}

      | AND  { (Lambda
                       (Bool, [Param ("x", Bool);
                              Param ("y", Bool)],
                        And (Var ("x", $1),
                              Var ("y", $1),
                                        $1) ,$1))}
      | OR  { (Lambda
                       (Bool, [Param ("x", Bool);
                              Param ("y", Bool)],
                        Or (Var ("x", $1),
                              Var ("y", $1),
                                        $1) ,$1))}
;

// Task 1 part 2
MulIn : SEMICOLON ID EQ Exp MulIn %prec letprec
            { Let (Dec (fst $2, $4, $3), $5, $1)}
      | IN Exp 
            { $2 }



///////////////////////////////////////////////////////
// TODO: project tasks 1,2,4:
//       add grammer rules for the new expressions
///////////////////////////////////////////////////////


// return the tuple of the type and the
//CphRes : Type ID EQ Exp
//        { (((fst $2, $1), Lambda($1, [Param(fst $2, $1)], $4, $3)) }
//;

// get pairs of identifiers to be used later
// (index, array name)
//CphInps : ID BACKARROW ID SEMICOLON CphInps      
//      { ($1, $3) :: $5 }
//      | ID BACKARROW ID 
//      { [($1, $3)] }
//;*)


// Map (func, input, input type, return type, pos)
// Filter (pred, input, type, pos)
// Lambda (type, args, body, pos)
//            1      2    3  4      5       6       7         8     9     10
//Compreh : LBRACKET Type Exp BAR CphInps SEMICOLON CphRes SEMICOLON Exp RBRACKET
//            { Map(
//                  Lambda($2, [Param(fst $7)], $3, $2), 
//                        Filter(
//                              Lambda(),
//                              Map($7, Iota(List.fold ( fun sz arg -> Times(sz, Apply("length", [Var(arg,)], pos))) (Constant (IntVal 1) (List.map snd %5))), 
//                              $1
//                              ),
//                              
//                              )
//                  ) 
//            }
      //    1      2   3   4      5      6        7       8
//      | LBRACKET Type Exp BAR CphInps SEMICOLON CphRes RBRACKET
//            { Map(
                  // $2 are the rtp, fst $7 are a tuple of string*Type, $3 are the body (Exp), $2 are the position.
//                  Lambda($2,[Param(fst $7)],$3,$2),
//                  Map(
//                        snd $7,
//                        Iota( // create new array
//                              List.map snd %5 // get array names for all arrays
                              // get the length of alle arrays and multiply them together.
//                              |> List.fold ( fun sz arr -> Times(sz, Apply("length", [Var(arr, $6)], $6))) (Constant (IntVal 1)), 
//                              $1
//                        )
//                  ),
//                  $1
//                  )
//            }
//;

Exp : NUM            { Constant (IntVal (fst $1), snd $1) }
    | CHARLIT        { Constant (CharVal (fst $1), snd $1) }
    | BOOLLIT        { Constant (BoolVal (fst $1), snd $1) }
    | ID             { Var $1 }
    | STRINGLIT      { StringLit $1 }
    | LCURLY Exps RCURLY
                     { ArrayLit ($2, (), $1) }
    | Exp PLUS  Exp  { Plus ($1, $3, $2) }
    | Exp MINUS Exp  { Minus($1, $3, $2) }

    // Task 1 Part a $1 are the left subexpression $2 are the position from OR
    // $3 are the right subexpression
    | Exp TIMES  Exp  { Times ($1, $3, $2) }
    | Exp DIVIDE Exp  { Divide ($1, $3, $2) }
    | Exp AND  Exp    { And ($1, $3, $2) }
    | Exp OR   Exp    { Or ($1, $3, $2) }
    | NOT Exp         { Not ($2, $1) }
    | NEG Exp         { Negate ($2, $1) }


    | Exp DEQ   Exp  { Equal($1, $3, $2) }
    | Exp LTH   Exp  { Less ($1, $3, $2) }
    | IF Exp THEN Exp ELSE Exp %prec ifprec
                     { If ($2, $4, $6, $1) }
    | ID LPAR Exps RPAR
                     { Apply (fst $1, $3, snd $1) }
    | ID LPAR RPAR   { Apply (fst $1, [], snd $1) }
    | READ LPAR Type RPAR
                     { Read ($3, $1) }
    | WRITE LPAR Exp RPAR
                     { Write ($3, (), $1) }
    | IOTA LPAR Exp RPAR
                     { Iota ($3, $1) }
    | MAP LPAR FunArg COMMA Exp RPAR
                     { Map ($3, $5, (), (), $1) }
    | REDUCE LPAR FunArg COMMA Exp COMMA Exp RPAR
                     { Reduce ($3, $5, $7, (), $1) }
    | REDUCE LPAR OP BinOp COMMA Exp COMMA Exp RPAR
                     { Reduce ($4, $6, $8, (), $1) }
    | LPAR Exp RPAR  { $2 }

    // FOR TASK 2

    | REPLICATE LPAR Exp COMMA Exp RPAR
                     { Replicate ($3, $5, (), $1) }
    | FILTER LPAR FunArg COMMA Exp RPAR
                     { Filter ($3, $5, (), $1) }
    | SCAN LPAR FunArg COMMA Exp COMMA Exp RPAR
                     { Scan ($3, $5, $7, (), $1) }

    // TODO: task 1(b): replace this with a more general production
    | LET ID EQ Exp MulIn %prec letprec
                     { Let (Dec (fst $2, $4, $3), $5, $1) }

    | ID LBRACKET Exp RBRACKET
                     { Index (fst $1, $3, (), $2) }
;

Exps : Exp COMMA Exps { $1 :: $3 }
     | Exp            { $1 :: [] }
;

FunArg : ID    { FunName (fst $1 ) }
       | FN Type LPAR RPAR ARROW Exp
               { Lambda ($2, [], $6, $1) }
       | FN Type LPAR Params RPAR ARROW Exp
               { Lambda ($2, $4, $7, $1) }
;

%%
